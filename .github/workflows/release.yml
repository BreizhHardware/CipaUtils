name: Release & Version Bump

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  build-release-bump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | grep -E '^[0-9]+(\.[0-9]+)*$' | tail -1)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Tag current commit (old version)
        run: |
          git tag -f v${{ env.current_version }}
          git push -f origin v${{ env.current_version }}

      - name: Build with Maven
        run: mvn clean package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.current_version }}
          name: CipaUtils v${{ env.current_version }}
          files: target/*.jar
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout dev branch
        run: |
          git fetch origin dev:dev
          git checkout dev

      - name: Bump version (patch) sur dev
        id: bump_version_dev
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | grep -E '^[0-9]+(\.[0-9]+)*$' | tail -1)
          CLEAN_VERSION=$(echo "$CURRENT_VERSION" | grep -Eo '^[0-9]+(\.[0-9]+){1,2}$')
          IFS='.' read -r a b c <<< "$CLEAN_VERSION"
          if [ -z "$c" ]; then
            NEW_VERSION="$a.$((b+1))"
          else
            NEW_VERSION="$a.$b.$((c+1))"
          fi
          mvn versions:set -DnewVersion=$NEW_VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Créer branche bump-version/${{ env.new_version }}
        run: |
          if [ -z "${{ env.new_version }}" ]; then
            echo "La variable new_version n'est pas définie."
            exit 1
          fi
          git checkout -b bump-version/${{ env.new_version }}

      - name: Update plugin.yml and scripts sur bump-version/${{ env.new_version }}
        run: |
          sed -i "s/^version: .*/version: ${{ env.new_version }}/" src/main/resources/plugin.yml
          sed -i "s/^PLUGIN_VERSION=.*/PLUGIN_VERSION=${{ env.new_version }}/" start-test-server.sh
          sed -i "s/^PLUGIN_JAR=.*/PLUGIN_JAR=CipaUtils-${{ env.new_version }}.jar/" start-test-server.sh
          sed -i "s/^set PLUGIN_VERSION=.*/set PLUGIN_VERSION=${{ env.new_version }}/" start-test-server.bat
          sed -i "s/^set PLUGIN_JAR=.*/set PLUGIN_JAR=CipaUtils-${{ env.new_version }}.jar/" start-test-server.bat

      - name: Commit version bump sur bump-version/${{ env.new_version }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml src/main/resources/plugin.yml start-test-server.sh start-test-server.bat
          git commit -m "Bump version for next development cycle (dev)" || echo "No changes to commit"
          git push origin bump-version/${{ env.new_version }}

      - name: Create Pull Request vers dev
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bump-version/${{ env.new_version }}
          base: dev
          title: "Bump version for next development cycle (dev)"
          body: "Automated version bump après release sur main."
          labels: version-bump
          reviewers: BreizhHardware

